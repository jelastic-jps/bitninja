type: update
version: 6.0.1
name: BitNinja Service
logo: images/logo.png
homepage: https://bitninja.io/

baseUrl: https://raw.githubusercontent.com/jelastic-jps/bitninja/main

onBeforeInit: |
  var resp = jelastic.dev.scripting.Eval("a498b13745283f7f3dbab7a31ed7d348", session, "wizard.ui", {
    groupType: "${account.groupType:}",
    uid: "${user.uid}"
  });
  return resp.response ? resp.response:resp;

description:
  short: BitNinja All-in-One Server Protection

buttons:
  - caption: BitNinja Admin Panel
    href: https://admin.bitninja.io/site/login

targetNodes:
  nodeType:
    - tomcat6
    - tomcat7
    - tomcat8
    - tomcat85
    - tomcat9
    - tomcat
    - tomee
    - tomee-dockerized
    - glassfish3
    - glassfish4
    - glassfish
    - jetty
    - jetty6
    - apache
    - apache2
    - nginxphp
    - apache2-ruby
    - nginx-ruby
    - nginx
    - nginx-dockerized
    - nginxphp-dockerized
    - haproxy
    - apache-lb
    - varnish
    - varnish-dockerized
    - payara
    - wildfly
    - nodejs
    - apache-ruby
    - apache-python
    - nginxruby
    - litespeedphp
    - litespeedadc
    - lemp
    - llsmp
    - jenkins
    - jenkins2
    - kubernetes
    
globals:
  action: /etc/bitninja/jelastic_action

onAfterStart: updateLicenses
onBeforeStop: deleteLicenses

onBeforeClone:
  cmd [${targetNodes.nodeGroup}]: test /etc/bitninja  && echo 'clone' > ${globals.action}
  user: root

onAfterClone:
  - script: return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    envName: ${event.response.env.envName}
    nodeGroup: ${targetNodes.nodeGroup}
    settings: ${settings}

onBeforeServiceScaleOut:
  cmd [${targetNodes.nodeGroup}]: test /etc/bitninja && echo 'scale' > ${globals.action}
  user: root

onAfterServiceScaleOut:
  - if ('${event.params.nodeGroup}' == '${targetNodes.nodeGroup}'):
    - if (${targetNodes.nodeGroup.length:0}): deleteLicenses
    - if (!${targetNodes.nodeGroup.length:0}): reinstallBitNinja

onAfterScaleIn:
  if ('${event.params.nodeGroup}' == '${targetNodes.nodeGroup}'):
    - if (${targetNodes.nodeGroup.length:0}): deleteLicenses
    - if (!${targetNodes.nodeGroup.length:0}):
        manageLicenses: scale

onBeforeDelete: uninstallBitninja

onUninstall: uninstallBitninja

onInstall: setupBitninja

actions:
  setupBitninja:
    - manageLicenses
    - forEach(license:response.licenses):
        installAgent:
          licenseKey: ${@license.licenseKey}
          id: ${@license.id}
    - enableInitScript
    - disableBitNinjaAutoLoad
    - addFavoriteDir
  
  reinstallBitNinja: 
    - cmd[${targetNodes.master.id}]: /etc/init.d/bitninja restart
      user: root
    - manageLicenses
    - forEach(license:response.licenses):
        - uninstallAgent: ${@license.id}
        - removeLogs: ${@license.id}
        - installAgent:
            licenseKey: ${@license.licenseKey}
            id: ${@license.id}

  uninstallBitninja:
    - manageLicenses: uninstall
    - forEach(license:response.licenses):
        uninstallAgent: ${@license.id}
    - removeFavoriteDir

  updateLicenses:
    - manageLicenses
    - forEach(license:response.licenses):
        cmd [${@license.id}]: bitninja-config --provision-key='${@license.licenseKey}'&& /etc/init.d/bitninja restart
        user: root

  deleteLicenses:
    manageLicenses: uninstall

  manageLicenses:
    - script: |
        var params = {
          nodeGroup: "${targetNodes.nodeGroup}",
          envName: "${env.name}",
          action: "${this:}"
        };
        var resp = jelastic.dev.scripting.Eval("a498b13745283f7f3dbab7a31ed7d348", session, "license", params);
        return resp.response ? resp.response:resp;

  uninstallAgent:
    cmd [${this}]: service bitninja stop; yum -y remove 'bitninja*'; rm -Rf /opt/bitninja*; rm -Rf /var/lib/bitninja*; rm -Rf /etc/bitninja*;
    user: root
    
  removeLogs:
    cmd [${this}]: rm -Rf /var/log/bitninja*;
    user: root

  installAgent:
    cmd [${this.id}]: curl https://get.bitninja.io/install.sh | /bin/bash -s - --license_key='${this.licenseKey}' -y
    user: root

  enableInitScript:
    cmd [${targetNodes.nodeGroup}]: |-
      curl  -fsSL "${baseUrl}/scripts/init.sh" -o /etc/rc.d/init.d/jelastic-bitninja
      chmod +x /etc/rc.d/init.d/jelastic-bitninja
      chkconfig --add jelastic-bitninja
    user: root
    
  disableBitNinjaAutoLoad:
    cmd [${targetNodes.nodeGroup}]: $(ps uax | grep -v grep | grep -q bitninja) && chkconfig --del bitninja
    user: root
  
  addFavoriteDir:
    - cmd [${targetNodes.nodeGroup}]: chmod -R 644 /etc/bitninja/*; chmod 755 /etc/bitninja
      user: root
    - env.file.AddFavorite:
        nodeGroup: ${targetNodes.nodeGroup}
        path: /etc/bitninja
        keyword: BitNinja
        isDir: true
      
  removeFavoriteDir:
    env.file.RemoveFavorite:
      nodeGroup: ${targetNodes.nodeGroup}
      path: /etc/bitninja
